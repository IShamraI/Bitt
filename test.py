# from iso8583.loader import Config
from iso8583.config import DeviceConfig
from iso8583.builder import CDbBuilder
from iso8583.message import Message
# from iso8583.sclient import Client
from iso8583.parser import Parser

imsg = [(2, "4000010000000001"),
        (3, "840000"),
        (4, "000000001000"),
        (7, "1106140117"),
        (11, "334748"),
        (12, "201106140117"),
        (14, "2512"),
        (37, "031114334748"),
        (41, "00999201"),
        (42, "M999201"),
        (49, "810")]

msgs = [
    bytes.fromhex('303230307234000008C0800031363430303030313030303030303030303138343030303030303030303030303130303031' +
                  '31303631343031313733333437343832303131303631343031313732353132303331313134333334373438303039393932' +
                  '30314D3939393230312020202020202020383130'),
    bytes.fromhex('30323030F234000008C0800000000000040000003136343030303031303030303030303030313834303030303030303030' +
                  '30303031303030313130363134303131373333343734383230313130363134303131373235313230333131313433333437' +
                  '343830303939393230314D3939393230312020202020202020383130313634303030303130303030303030303031'),
    bytes.fromhex('30323030F234000008C3840000000040040000003136343030303031303030303030303030313834303030303030303030' +
                  '30303031303030313130363134303131373333343734383230313130363134303131373235313230333131313433333437' +
                  '343830303939393230314D3939393230312020202020202020303138303037303033303031303039303033353435303037' +
                  '31313033383430383130303230303030323634334330303030303030303030303030313030303133363638313130393137' +
                  '32363533313634303030303130303030303030303031'),
    bytes.fromhex('30323130723400000EC0800031363430303030313030303030303030303138343030303030303030303030303130303031' +
                  '31313331303431323639313130373832303131313331303431323632353132303331383130393131303738313030313032' +
                  '303030303939393230314D3939393230312020202020202020383130'),
    bytes.fromhex('30343030723440000CC2000031363430303030313030303030303030303138343030303030303030303030303130303031' +
                  '31313331303431333039313130373832303131313331303431323632353132333634353033313831303931313037383130' +
                  '3031303230303939393230314D39393932303120202020202020203030383138373030323531'),
    bytes.fromhex('30343130723440000AC0800031363430303030313030303030303030303138343030303030303030303030303130303031' +
                  '31313331303431333039313130373832303131313331303431323632353132363031303033313831303931313037383030' +
                  '30303939393230314D3939393230312020202020202020383130')
    # ,   bytes.fromhex('')
    # ,   bytes.fromhex('')
    # ,   bytes.fromhex('')
]

# print(cfg.fields)
for msg in msgs:
    parser = Parser('dicts/sample.yaml')
    builder = CDbBuilder('dicts/sample.yaml')
    parsed = parser.parse(msg)
    new_msg = builder.build(parsed)
    print(parsed)
    print("From  : ", msg)
    print("To    : ", new_msg)
    print("Equal : ", msg == new_msg)
    print("=" * 40)

device_config = DeviceConfig('devices/device1.yaml')
# c = Client(device_config)
m = Message(200, 'dicts/sample.yaml')
for i, v in imsg:
    m[i] = v

# b = CDbBuilder('dicts/sample.yaml')
# raw = b'CDb4'
# raw += b.build(m)
# c.send(raw)
# while True:
#     msg = c.read_socket()
#     if msg:
#         print(msg)
#     else:
#         break
